---
name: Stannum::Contracts::ParametersContract
slug: parameters-contract
type: class
files:
- lib/stannum/contracts/parameters_contract.rb
parent_path: stannum/contracts
short_description: A Parameters defines constraints on the parameters for a block
  or method.
constants:
- name: NEGATED_TYPE
  path: stannum/constraints/base/negated-type
  slug: negated-type
  inherited: true
- name: TYPE
  path: stannum/constraints/base/type
  slug: type
  inherited: true
defined_classes:
- name: Builder
  slug: builder
instance_attributes:
- name: options
  read: true
  write: true
  path: stannum/constraints/base/i-options
  slug: options
  inherited: true
instance_methods:
- name: "=="
  path: stannum/contracts/base/i-==
  slug: "=="
  inherited: true
- name: add_argument_constraint
  path: stannum/contracts/parameters-contract/i-add-argument-constraint
  slug: add-argument-constraint
  inherited: false
- name: add_constraint
  path: stannum/contract/i-add-constraint
  slug: add-constraint
  inherited: true
- name: add_key_constraint
  path: stannum/contracts/map-contract/i-add-key-constraint
  slug: add-key-constraint
  inherited: true
- name: add_keyword_constraint
  path: stannum/contracts/parameters-contract/i-add-keyword-constraint
  slug: add-keyword-constraint
  inherited: false
- name: add_property_constraint
  path: stannum/contract/i-add-property-constraint
  slug: add-property-constraint
  inherited: true
- name: allow_extra_keys?
  path: stannum/contracts/map-contract/i-allow-extra-keys?
  slug: allow-extra-keys?
  inherited: true
- name: clone
  path: stannum/constraints/base/i-clone
  slug: clone
  inherited: true
- name: concat
  path: stannum/contracts/base/i-concat
  slug: concat
  inherited: true
- name: does_not_match?
  path: stannum/contracts/base/i-does-not-match?
  slug: does-not-match?
  inherited: true
- name: dup
  path: stannum/constraints/base/i-dup
  slug: dup
  inherited: true
- name: each_constraint
  path: stannum/contracts/base/i-each-constraint
  slug: each-constraint
  inherited: true
- name: each_pair
  path: stannum/contracts/base/i-each-pair
  slug: each-pair
  inherited: true
- name: errors_for
  path: stannum/contracts/base/i-errors-for
  slug: errors-for
  inherited: true
- name: expected_keys
  path: stannum/contracts/map-contract/i-expected-keys
  slug: expected-keys
  inherited: true
- name: initialize
  path: stannum/contracts/hash-contract/i-initialize
  slug: initialize
  inherited: true
  constructor: true
- name: key_type
  path: stannum/contracts/hash-contract/i-key-type
  slug: key-type
  inherited: true
- name: match
  path: stannum/contracts/base/i-match
  slug: match
  inherited: true
- name: matches?
  path: stannum/contracts/base/i-matches?
  slug: matches?
  inherited: true
- name: message
  path: stannum/constraints/base/i-message
  slug: message
  inherited: true
- name: negated_errors_for
  path: stannum/contracts/base/i-negated-errors-for
  slug: negated-errors-for
  inherited: true
- name: negated_match
  path: stannum/contracts/base/i-negated-match
  slug: negated-match
  inherited: true
- name: negated_message
  path: stannum/constraints/base/i-negated-message
  slug: negated-message
  inherited: true
- name: negated_type
  path: stannum/constraints/base/i-negated-type
  slug: negated-type
  inherited: true
- name: set_arguments_item_constraint
  path: stannum/contracts/parameters-contract/i-set-arguments-item-constraint
  slug: set-arguments-item-constraint
  inherited: false
- name: set_block_constraint
  path: stannum/contracts/parameters-contract/i-set-block-constraint
  slug: set-block-constraint
  inherited: false
- name: set_keywords_value_constraint
  path: stannum/contracts/parameters-contract/i-set-keywords-value-constraint
  slug: set-keywords-value-constraint
  inherited: false
- name: type
  path: stannum/constraints/base/i-type
  slug: type
  inherited: true
- name: value_type
  path: stannum/contracts/hash-contract/i-value-type
  slug: value-type
  inherited: true
- name: with_options
  path: stannum/contracts/map-contract/i-with-options
  slug: with-options
  inherited: true
data_path: stannum/contracts/parameters-contract
description: |-
  The ParametersContract requires that the actual object matched be a Hash
  with the following keys: :arguments, with an Array value; :keywords, with a
  Hash value; and :block, with a value of either a Proc or nil.

  For the arguments constraints, the contract verifies that the correct number
  of arguments are given and that each argument matches the type or constraint
  specified. If the contract has a variadic arguments constraint, then each
  variadic (or "splatted") argument is checked against the type or constraint.

  For the keywords constraints, the contract verifies that the expected
  keywords are given and that each keyword value matches the type or
  constraint specified. If the contract has a variadic keywords constraint,
  then each variadic keyword value is checked against the type or constraint.

  For the block constraint, the contract specifies that the block is present,
  the block is absent, or the block matches the given constraint.
metadata:
  examples:
  - name: Defining A Parameters Contract With Arguments
    text: |-
      contract = Stannum::Contracts::ParametersContract.new do
        argument :name, String
        argument :size, String, default: true
      end

      contract.matches?(
        { arguments: [], keywords: {}, block: nil }
      )
      #=> false

      contract.matches?(
        { arguments: [:a_symbol], keywords: {}, block: nil }
      )
      #=> false

      contract.matches?(
        { arguments: ['Widget', 'Small', :extra], keywords: {}, block: nil }
      )
      #=> false

      contract.matches?(
        { arguments: ['Widget', 'Small', :extra], keywords: {}, block: nil }
      )
      #=> false

      contract.matches?(
        { arguments: ['Widget'], keywords: {}, block: nil }
      )
      #=> true

      contract.matches?(
        { arguments: ['Widget', nil], keywords: {}, block: nil }
      )
      #=> false

      contract.matches?(
        { arguments: ['Widget', 'Small'], keywords: {}, block: nil }
      )
      #=> true
  - name: Defining A Parameters Contract With Keywords
    text: |-
      contract = Stannum::Contracts::ParametersContract.new do
        keyword :price,    String
        keyword :quantity, Integer, optional: true
      end

      contract.matches?(
        { arguments: [], keywords: {}, block: nil }
      )
      #=> false

      contract.matches?(
        arguments: [],
        keywords:  {
          price: 1_000_000,
        },
        block: nil
      )
      #=> false

      contract.matches?(
        arguments: [],
        keywords:  {
          currency: 'USD',
          price:    '$1_000_000',
        },
        block: nil
      )
      #=> false

      contract.matches?(
        arguments: [],
        keywords:  {
          price: '$1_000_000',
        },
        block: nil
      )

      #=> true
      contract.matches?(
        arguments: [],
        keywords:  {
          price:    '$1_000_000',
          quantity: 50,
        },
        block: nil
      )
      #=> true
  - name: Defining A Parameters Contract With Variadic Arguments
    text: |-
      contract = Stannum::Contracts::ParametersContract.new do
        arguments :words, String
      end

      contract.matches?(
        { arguments: [1, 2, 3], keywords: {}, block: nil }
      )
      #=> false

      contract.matches?(
        { arguments: [], keywords: {}, block: nil }
      )
      #=> true

      contract.matches?(
        { arguments: ['foo', 'bar', 'baz'], keywords: {}, block: nil }
      )
      #=> true
  - name: Defining A Parameters Contract With Variadic Keywords
    text: |-
      contract = Stannum::Contracts::ParametersContract.new do
        keywords :options, Symbol
      end

      contract.matches?(
        arguments: [],
        keywords:  {
          price: 1_000_000,
        },
        block: nil
      )
      #=> false

      contract.matches?(
        arguments: [],
        keywords:  {},
        block: nil
      )
      #=> true

      contract.matches?(
        arguments: [],
        keywords:  {
          color: :red,
          shape: :triangle
        },
        block: nil
      )
      #=> true
  - name: Defining A Parameters Contract With A Block Constraint
    text: |-
      contract = Stannum::Contracts::ParametersContract.new do
        block true
      end

      contract.matches?(
        { arguments: [], keywords: {}, block: nil }
      )
      #=> false

      contract.matches?(
        { arguments: [], keywords: {}, block: Proc.new }
      )
      #=> true
constructor: true
inherited_classes:
- name: Stannum::Contracts::HashContract
  slug: hash-contract
  path: stannum/contracts/hash-contract
- name: Stannum::Contracts::MapContract
  slug: map-contract
  path: stannum/contracts/map-contract
- name: Stannum::Contract
  slug: contract
  path: stannum/contract
- name: Stannum::Contracts::Base
  slug: base
  path: stannum/contracts/base
- name: Stannum::Constraints::Base
  slug: base
  path: stannum/constraints/base
version: '0.4'
