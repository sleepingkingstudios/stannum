---
name: Stannum::Contracts::ArrayContract
slug: array-contract
type: class
files:
- lib/stannum/contracts/array_contract.rb
parent_path: stannum/contracts
short_description: An ArrayContract defines constraints for an Array and its items.
constants:
- name: NEGATED_TYPE
  path: stannum/constraints/base/negated-type
  slug: negated-type
  inherited: true
- name: TYPE
  path: stannum/constraints/base/type
  slug: type
  inherited: true
instance_attributes:
- name: options
  read: true
  write: true
  path: stannum/constraints/base/i-options
  slug: options
  inherited: true
instance_methods:
- name: "=="
  path: stannum/contracts/base/i-==
  slug: "=="
  inherited: true
- name: add_constraint
  path: stannum/contract/i-add-constraint
  slug: add-constraint
  inherited: true
- name: add_index_constraint
  path: stannum/contracts/tuple-contract/i-add-index-constraint
  slug: add-index-constraint
  inherited: true
- name: add_property_constraint
  path: stannum/contract/i-add-property-constraint
  slug: add-property-constraint
  inherited: true
- name: allow_extra_items?
  path: stannum/contracts/tuple-contract/i-allow-extra-items?
  slug: allow-extra-items?
  inherited: true
- name: clone
  path: stannum/constraints/base/i-clone
  slug: clone
  inherited: true
- name: concat
  path: stannum/contracts/base/i-concat
  slug: concat
  inherited: true
- name: does_not_match?
  path: stannum/contracts/base/i-does-not-match?
  slug: does-not-match?
  inherited: true
- name: dup
  path: stannum/constraints/base/i-dup
  slug: dup
  inherited: true
- name: each_constraint
  path: stannum/contracts/base/i-each-constraint
  slug: each-constraint
  inherited: true
- name: each_pair
  path: stannum/contracts/base/i-each-pair
  slug: each-pair
  inherited: true
- name: errors_for
  path: stannum/contracts/base/i-errors-for
  slug: errors-for
  inherited: true
- name: initialize
  path: stannum/contracts/array-contract/i-initialize
  slug: initialize
  inherited: false
  constructor: true
- name: item_type
  path: stannum/contracts/array-contract/i-item-type
  slug: item-type
  inherited: false
- name: match
  path: stannum/contracts/base/i-match
  slug: match
  inherited: true
- name: matches?
  path: stannum/contracts/base/i-matches?
  slug: matches?
  inherited: true
- name: message
  path: stannum/constraints/base/i-message
  slug: message
  inherited: true
- name: negated_errors_for
  path: stannum/contracts/base/i-negated-errors-for
  slug: negated-errors-for
  inherited: true
- name: negated_match
  path: stannum/contracts/base/i-negated-match
  slug: negated-match
  inherited: true
- name: negated_message
  path: stannum/constraints/base/i-negated-message
  slug: negated-message
  inherited: true
- name: negated_type
  path: stannum/constraints/base/i-negated-type
  slug: negated-type
  inherited: true
- name: type
  path: stannum/constraints/base/i-type
  slug: type
  inherited: true
- name: with_options
  path: stannum/contracts/array-contract/i-with-options
  slug: with-options
  inherited: false
data_path: stannum/contracts/array-contract
description: |-
  In order to match an ArrayContract, the object must be an instance of Array,
  and the items in the array at each index must match the item constraint
  defined for that index. If the :item_type option is set, each item must
  match that type or constraint. Finally, unless the :allow_extra_items option
  is set to true, the object must not have any extra items.
metadata:
  examples:
  - name: Creating A Contract With Item Constraints
    text: |-
      third_base_constraint = Stannum::Constraint.new do |actual|
        actual == "I Don't Know"
      end
      array_contract = Stannum::Contracts::ArrayContract.new do
        item { |actual| actual == 'Who' }
        item { |actual| actual == 'What' }
        item third_base_constraint
      end
  - name: With A Non-Array Object
    text: |-
      array_contract.matches?(nil) #=> false
      errors = array_contract.errors_for(nil)
      errors.to_a
      #=> [
        {
          type:    'stannum.constraints.type',
          data:    { required: true, type: Array },
          message: nil,
          path:    []
        }
      ]
  - name: With An Object With Missing Items
    text: |-
      array_contract.matches?(['Who']) #=> false
      errors = array_contract.errors_for(['Who'])
      errors.to_a
      #=> [
        { type: 'stannum.constraints.invalid', data: {}, path: [1], message: nil },
        { type: 'stannum.constraints.invalid', data: {}, path: [2], message: nil }
      ]
  - name: With An Object With Incorrect Items
    text: |-
      array_contract.matches?(['What', 'What', "I Don't Know"]) #=> false
      errors = array_contract.errors_for(['What', 'What', "I Don't Know"])
      errors.to_a
      #=> [
        { type: 'stannum.constraints.invalid', data: {}, path: [0], message: nil }
      ]
  - name: With An Object With Valid Items
    text: |-
      array_contract.matches?(['Who', 'What', "I Don't Know"]) #=> true
      errors = array_contract.errors_for(['What', 'What', "I Don't Know"])
      errors.to_a #=> []
  - name: With An Object With Extra Items
    text: |-
      array_contract.matches?(['Who', 'What', "I Don't Know", 'Tomorrow', 'Today']) #=> false
      errors = array_contract.errors_for(['Who', 'What', "I Don't Know", 'Tomorrow', 'Today'])
      errors.to_a
      #=> [
        { type: 'stannum.constraints.tuples.extra_items', data: {}, path: [3], message: nil },
        { type: 'stannum.constraints.tuples.extra_items', data: {}, path: [4], message: nil }
      ]
constructor: true
inherited_classes:
- name: Stannum::Contracts::TupleContract
  slug: tuple-contract
  path: stannum/contracts/tuple-contract
- name: Stannum::Contract
  slug: contract
  path: stannum/contract
- name: Stannum::Contracts::Base
  slug: base
  path: stannum/contracts/base
- name: Stannum::Constraints::Base
  slug: base
  path: stannum/constraints/base
version: '0.4'
