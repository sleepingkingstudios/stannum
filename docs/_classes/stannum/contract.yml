---
name: Stannum::Contract
slug: contract
type: class
files:
- lib/stannum/contract.rb
parent_path: stannum
short_description: A Contract defines constraints on an object and its properties.
constants:
- name: NEGATED_TYPE
  path: stannum/constraints/base/negated-type
  slug: negated-type
  inherited: true
- name: TYPE
  path: stannum/constraints/base/type
  slug: type
  inherited: true
defined_classes:
- name: Builder
  slug: builder
instance_attributes:
- name: options
  read: true
  write: true
  path: stannum/constraints/base/i-options
  slug: options
  inherited: true
instance_methods:
- name: "=="
  path: stannum/contracts/base/i-==
  slug: "=="
  inherited: true
- name: add_constraint
  path: stannum/contract/i-add-constraint
  slug: add-constraint
  inherited: false
- name: add_property_constraint
  path: stannum/contract/i-add-property-constraint
  slug: add-property-constraint
  inherited: false
- name: clone
  path: stannum/constraints/base/i-clone
  slug: clone
  inherited: true
- name: concat
  path: stannum/contracts/base/i-concat
  slug: concat
  inherited: true
- name: does_not_match?
  path: stannum/contracts/base/i-does-not-match?
  slug: does-not-match?
  inherited: true
- name: dup
  path: stannum/constraints/base/i-dup
  slug: dup
  inherited: true
- name: each_constraint
  path: stannum/contracts/base/i-each-constraint
  slug: each-constraint
  inherited: true
- name: each_pair
  path: stannum/contracts/base/i-each-pair
  slug: each-pair
  inherited: true
- name: errors_for
  path: stannum/contracts/base/i-errors-for
  slug: errors-for
  inherited: true
- name: initialize
  path: stannum/contracts/base/i-initialize
  slug: initialize
  inherited: true
  constructor: true
- name: match
  path: stannum/contracts/base/i-match
  slug: match
  inherited: true
- name: matches?
  path: stannum/contracts/base/i-matches?
  slug: matches?
  inherited: true
- name: message
  path: stannum/constraints/base/i-message
  slug: message
  inherited: true
- name: negated_errors_for
  path: stannum/contracts/base/i-negated-errors-for
  slug: negated-errors-for
  inherited: true
- name: negated_match
  path: stannum/contracts/base/i-negated-match
  slug: negated-match
  inherited: true
- name: negated_message
  path: stannum/constraints/base/i-negated-message
  slug: negated-message
  inherited: true
- name: negated_type
  path: stannum/constraints/base/i-negated-type
  slug: negated-type
  inherited: true
- name: type
  path: stannum/constraints/base/i-type
  slug: type
  inherited: true
- name: with_options
  path: stannum/constraints/base/i-with-options
  slug: with-options
  inherited: true
data_path: stannum/contract
metadata:
  examples:
  - name: Creating A Contract With Property Constraints
    text: |-
      Widget = Struct.new(:name, :manufacturer)
      Manufacturer = Struct.new(:factory)
      Factory = Struct.new(:address)

      type_constraint = Stannum::Constraints::Type.new(Widget)
      name_constraint =
        Stannum::Constraint.new(type: 'wrong_name', negated_type: 'right_name') do |value|
          value == 'Self-sealing Stem Bolt'
        end
      address_constraint =
        Stannum::Constraint.new(type: 'wrong_address', negated_type: 'right_address') do |value|
          value == '123 Example Street'
        end
      contract =
        Stannum::Contract.new
        .add_constraint(type_constraint)
        .add_constraint(name_constraint, property: :name)
        .add_constraint(address_constraint, property: %i[manufacturer factory address])
  - name: With An Object That Matches None Of The Property Constraints
    text: |-
      # With a non-Widget object.
      contract.matches?(nil) #=> false
      errors = contract.errors_for(nil)
      errors.to_a
      #=> [
        { type: 'is_not_type', data: { type: Widget }, path: [], message: nil },
        { type: 'wrong_name', data: {}, path: [:name], message: nil },
        { type: 'wrong_address', data: {}, path: [:manufacturer, :factory, :address], message: nil }
      ]
      errors[:name].to_a
      #=> [
        { type: 'wrong_name', data: {}, path: [], message: nil }
      ]
      errors[:manufacturer].to_a
      #=> [
        { type: 'wrong_address', data: {}, path: [:factory, :address], message: nil }
      ]

      contract.does_not_match?(nil)          #=> true
      contract.negated_errors_for?(nil).to_a #=> []
  - name: With An Object That Matches Some Of The Property Constraints
    text: |-
      contract.matches?(Widget.new) #=> false
      errors = contract.errors_for(Widget.new)
      errors.to_a
      #=> [
        { type: 'wrong_name', data: {}, path: [:name], message: nil },
        { type: 'wrong_address', data: {}, path: [:manufacturer, :factory, :address], message: nil }
      ]

      contract.does_not_match?(Widget.new) #=> false
      errors = contract.negated_errors_for(Widget.new)
      errors.to_a
      #=> [
        { type: 'is_type', data: { type: Widget }, path: [], message: nil }
      ]
  - name: With An Object That Matches All Of The Property Constraints
    text: |-
      factory      = Factory.new('123 Example Street')
      manufacturer = Manufacturer.new(factory)
      widget       = Widget.new('Self-sealing Stem Bolt', manufacturer)
      contract.matches?(widget)        #=> true
      contract.errors_for(widget).to_a #=> []

      contract.does_not_match?(widget) #=> true
      errors = contract.negated_errors_for(widget)
      errors.to_a
      #=> [
        { type: 'is_type', data: { type: Widget }, path: [], message: nil },
        { type: 'right_name', data: {}, path: [:name], message: nil },
        { type: 'right_address', data: {}, path: [:manufacturer, :factory, :address], message: nil }
      ]
  - name: Defining A Custom Contract
    text: |-
      user_contract = Stannum::Contract.new do
        # Sanity constraints are evaluated first, and if a sanity constraint
        # fails, the contract will immediately halt.
        constraint Stannum::Constraints::Type.new(User), sanity: true

        # You can also define a constraint using a block.
        constraint(type: 'example.is_not_user') do |user|
          user.role == 'user'
        end

        # You can define a constraint on a property of the object.
        property :name, Stannum::Constraints::Presence.new
      end
  see:
  - label: Stannum::Contracts::Base
    path: stannum/contracts/base
    text:
    type: reference
constructor: true
direct_subclasses:
- name: Stannum::Contracts::MapContract
  slug: map-contract
  path: stannum/contracts/map-contract
- name: Stannum::Contracts::TupleContract
  slug: tuple-contract
  path: stannum/contracts/tuple-contract
inherited_classes:
- name: Stannum::Contracts::Base
  slug: base
  path: stannum/contracts/base
- name: Stannum::Constraints::Base
  slug: base
  path: stannum/constraints/base
version: "*"
